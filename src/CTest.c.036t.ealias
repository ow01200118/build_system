
;; Function printf (printf, funcdef_no=15, decl_uid=798, cgraph_uid=15, symbol_order=15)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__fmt = &PARM_NOALIAS(9)
PARM_NOALIAS(9) = &NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = __fmt
_4 = NONLOCAL
ESCAPED = _4

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL PARM_NOALIAS(9) }
NONLOCAL = { ESCAPED NONLOCAL } same as _4
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__fmt = { PARM_NOALIAS(9) }
PARM_NOALIAS(9) = { ESCAPED NONLOCAL }
__printf_chk = { }
_4 = { ESCAPED NONLOCAL }


Alias information for printf

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.2463 } (nonlocal, escaped, restrict)

Flow-insensitive points-to information

__fmt_2(D), points-to NULL, points-to vars: { D.2463 } (nonlocal, escaped, restrict)

__attribute__((__artificial__, __gnu_inline__, __always_inline__))
printf (const char * restrict __fmt)
{
  int _4;

  <bb 2> [0.00%]:
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function main (main, funcdef_no=23, decl_uid=2445, cgraph_uid=23, symbol_order=23)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
i.0_1 = i_3
_2 = i.0_1 + UNKNOWN
j_15 = j_5
j_15 = &NONLOCAL
k_14 = k_7
k_14 = &NONLOCAL
j_4 = j_15
j_4 = j_5
k_6 = k_7
k_6 = k_14
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = j_4
ESCAPED = k_6
_18 = NONLOCAL
i_17 = i_3
i_17 = &NONLOCAL
i_3 = &NULL
i_3 = i_17
j_5 = &NULL
j_5 = j_4
k_7 = &NULL
k_7 = k_6
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _18
STOREDANYTHING = { }
INTEGER = { ANYTHING }
i.0_1 = { NULL NONLOCAL }
i_3 = { NULL NONLOCAL } same as i.0_1
_2 = { NULL NONLOCAL }
j_15 = { NULL NONLOCAL } same as i.0_1
j_5 = { NULL NONLOCAL } same as i.0_1
k_14 = { NULL NONLOCAL } same as i.0_1
k_7 = { NULL NONLOCAL } same as i.0_1
j_4 = { NULL NONLOCAL } same as i.0_1
k_6 = { NULL NONLOCAL } same as i.0_1
__printf_chk = { }
_18 = { ESCAPED NONLOCAL }
i_17 = { NULL NONLOCAL } same as i.0_1


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information


main ()
{
  int D.2466;
  int k;
  int j;
  int i;
  unsigned int i.0_1;
  unsigned int _2;
  int _18;

  <bb 2> [0.00%]:
  goto <bb 7>; [0.00%]

  <bb 3> [0.00%]:
  i.0_1 = (unsigned int) i_3;
  _2 = i.0_1 & 1;
  if (_2 != 0)
    goto <bb 4>; [0.00%]
  else
    goto <bb 5>; [0.00%]

  <bb 4> [0.00%]:
  j_15 = j_5 + 1;
  goto <bb 6>; [0.00%]

  <bb 5> [0.00%]:
  k_14 = k_7 + 1;

  <bb 6> [100.00%]:
  # j_4 = PHI <j_15(4), j_5(5)>
  # k_6 = PHI <k_7(4), k_14(5)>
  _18 = __printf_chk (1, "j=%d, k=%d \n", j_4, k_6);
  i_17 = i_3 + 1;

  <bb 7> [0.00%]:
  # i_3 = PHI <0(2), i_17(6)>
  # j_5 = PHI <0(2), j_4(6)>
  # k_7 = PHI <0(2), k_6(6)>
  if (i_3 <= 9)
    goto <bb 3>; [0.00%]
  else
    goto <bb 8>; [0.00%]

  <bb 8> [0.00%]:
  return 0;

}


